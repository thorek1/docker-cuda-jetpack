# syntax=docker/dockerfile:experimental


FROM debian:sid-slim

ARG DEBIAN_FRONTEND=noninteractive

ENV CUDA_VERSION 10.2
ENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn

COPY apt-trusted-keys /tmp/

RUN apt-get update && apt-get install -y gnupg2 ca-certificates wget && apt-key add /tmp/apt-trusted-keys && \
    echo "deb file:///var/cuda-repo /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb http://repo.download.nvidia.com/jetson/t210 r32.4 main" > /etc/apt/sources.list.d/nvidia-l4t-apt-source.list && \
    echo "deb http://repo.download.nvidia.com/jetson/common r32.4 main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list

# Mount local CUDA apt repo only during build, to reduce image size
RUN --mount=type=bind,readonly,source=/var/cuda-repo,target=/var/cuda-repo \
    apt-get update && \
    apt-get install -y \
    cuda-cudart-$CUDA_VERSION \
    cuda-libraries-dev-$CUDA_VERSION \
    cuda-nvml-dev-$CUDA_VERSION \
    cuda-minimal-build-$CUDA_VERSION \
    cuda-command-line-tools-$CUDA_VERSION \
    cuda-samples-$CUDA_VERSION

RUN ln -s /usr/local/cuda-$CUDA_VERSION /usr/local/cuda

ENV LD_LIBRARY_PATH /usr/lib/aarch64-linux-gnu/tegra

ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.2"


RUN apt-get install -y \
    curl \
    julia \
    dumb-init \
    htop \
    locales \
    man \
    nano \
    git \
    procps \
    ssh \
    sudo \
    vim \
    python3-pip \
    lsb-release
#    debian-ports-archive-keyring


    
#RUN echo "deb http://ftp.ports.debian.org/debian-ports/ sid main" >> /etc/apt/sources.list
#RUN echo "deb http://ftp.debian.org/debian/ sid main" >> /etc/apt/sources.list
#RUN echo "deb http://ftp.de.debian.org/debian-ports/ sid main" >> /etc/apt/sources.list
#RUN gpg --keyserver hkp://subkeys.pgp.net --recv-keys 84C573CD4E1AFD6C && \
#    gpg --export 84C573CD4E1AFD6C | apt-key add -
#RUN wget -O - https://www.ports.debian.org/archive_2020.key | apt-key add -
# Mount local CUDA apt repo only during build, to reduce image size
#RUN cat /etc/apt/sources.list
#--mount=type=bind,readonly,source=/var/cuda-repo,target=/var/cuda-repo \
#    apt-get update && \
#    apt search libwgtk3.0
#RUN wget http://ftp.ports.debian.org/debian-ports//pool-arm64/main/w/wxwidgets3.0/libwxgtk3.0-dev_3.0.2-1_arm64.deb
#RUN apt install libwxgtk3.0-dev_3.0.2-1_arm64.deb

#RUN wget http://ftp.ports.debian.org/debian-ports//pool-arm64/main/q/qt4-x11/qt4-dev-tools_4.8.6+git64-g5dc8b2b+dfsg-2_arm64.deb
#RUN apt install qt4-dev-tools_4.8.6+git64-g5dc8b2b+dfsg-2_arm64.deb

#RUN --mount=type=bind,readonly,source=/var/cuda-repo,target=/var/cuda-repo \
#    apt-get update && \
#    apt-get install -y \
#    libx11-dev libxft-dev libxt-dev python2.7 python-numpy python-opengl pyqt4-dev-tools python-wxgtk3.0 libwxgtk3.0-dev qt4-dev-tools \
#    libgl1-mesa-dev libgs-dev texlive-latex-recommended dvipng \
#    libgtk2.0-dev libglfw3-dev libzmq3-dev cmake \
#    && rm -rf /var/lib/apt/lists/*
RUN rm -rf /var/lib/apt/lists/*

#RUN pip install PyOpenGL

RUN curl -fsSL https://code-server.dev/install.sh | sh


RUN sed -i "s/# en_US.UTF-8/en_US.UTF-8/" /etc/locale.gen \
  && locale-gen
ENV LANG=en_US.UTF-8
RUN chsh -s /bin/bash
ENV SHELL=/bin/bash
RUN adduser --gecos '' --disabled-password coder && \
  echo "coder ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/nopasswd
RUN ARCH="$(dpkg --print-architecture)" && \
    curl -fsSL "https://github.com/boxboat/fixuid/releases/download/v0.4.1/fixuid-0.4.1-linux-$ARCH.tar.gz" | tar -C /usr/local/bin -xzf - && \
    chown root:root /usr/local/bin/fixuid && \
    chmod 4755 /usr/local/bin/fixuid && \
    mkdir -p /etc/fixuid && \
    printf "user: coder\ngroup: coder\n" > /etc/fixuid/config.yml


#RUN wget https://julialang-s3.julialang.org/bin/linux/aarch64/1.4/julia-1.4.2-linux-aarch64.tar.gz
#RUN tar -xvzf julia-1.4.2-linux-aarch64.tar.gz
#ENV PATH="$PATH:/julia-1.4.2/bin"

#RUN ls
#RUN cd
# install GR plots.jl underlying framework
#COPY grinstall.sh .
#RUN grinstall.sh

#RUN cat <<EOF > grinstall.sh \
#  #!/bin/bash \
#  git clone https://github.com/jheinen/gr \
#  cd gr \
#  make \
#  make install \
#  make clean \
#  EOF

#RUN git clone https://github.com/jheinen/gr
#WORKDIR  gr
#RUN make
#RUN make install
#RUN make clean
#ENV PYTHONPATH=${PYTHONPATH}:/usr/local/gr/lib/python

USER root
#RUN echo "using Pkg; Pkg.add([\"CUDA\",\"LanguageServer\",\"Revise\",\"Distributions\"]);using CUDA, LanguageServer, Revise, Distributions;" >> setup.jl
RUN echo "using Pkg; Pkg.add([\"NonlinearEigenproblems\",\"CUDA\",\"LanguageServer\",\"Revise\",\"Distributions\"]);using CUDA, LanguageServer, Revise, Distributions, NonlinearEigenproblems;" >> setup.jl
RUN julia setup.jl

#USER coder

#WORKDIR /home/coder
ENTRYPOINT ["dumb-init", "fixuid", "-q", "/usr/bin/code-server",  "--bind-addr", "0.0.0.0:8080", "."]
